// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace CreditCardTheftDetector
{
    public partial class MLModel1
    {
        /// <summary>
        /// model input class for MLModel1.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"Time")]
            public float Time { get; set; }

            [ColumnName(@"V1")]
            public float V1 { get; set; }

            [ColumnName(@"V2")]
            public float V2 { get; set; }

            [ColumnName(@"V3")]
            public float V3 { get; set; }

            [ColumnName(@"V4")]
            public float V4 { get; set; }

            [ColumnName(@"V5")]
            public float V5 { get; set; }

            [ColumnName(@"V6")]
            public float V6 { get; set; }

            [ColumnName(@"V7")]
            public float V7 { get; set; }

            [ColumnName(@"V8")]
            public float V8 { get; set; }

            [ColumnName(@"V9")]
            public float V9 { get; set; }

            [ColumnName(@"V10")]
            public float V10 { get; set; }

            [ColumnName(@"V11")]
            public float V11 { get; set; }

            [ColumnName(@"V12")]
            public float V12 { get; set; }

            [ColumnName(@"V13")]
            public float V13 { get; set; }

            [ColumnName(@"V14")]
            public float V14 { get; set; }

            [ColumnName(@"V15")]
            public float V15 { get; set; }

            [ColumnName(@"V16")]
            public float V16 { get; set; }

            [ColumnName(@"V17")]
            public float V17 { get; set; }

            [ColumnName(@"V18")]
            public float V18 { get; set; }

            [ColumnName(@"V19")]
            public float V19 { get; set; }

            [ColumnName(@"V20")]
            public float V20 { get; set; }

            [ColumnName(@"V21")]
            public float V21 { get; set; }

            [ColumnName(@"V22")]
            public float V22 { get; set; }

            [ColumnName(@"V23")]
            public float V23 { get; set; }

            [ColumnName(@"V24")]
            public float V24 { get; set; }

            [ColumnName(@"V25")]
            public float V25 { get; set; }

            [ColumnName(@"V26")]
            public float V26 { get; set; }

            [ColumnName(@"V27")]
            public float V27 { get; set; }

            [ColumnName(@"V28")]
            public float V28 { get; set; }

            [ColumnName(@"Amount")]
            public float Amount { get; set; }

            [ColumnName(@"Class")]
            public float Class { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for MLModel1.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName("PredictedLabel")]
            public float Prediction { get; set; }

            public float[] Score { get; set; }
        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("MLModel1.zip");

       // public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public  ModelOutput Predict(ModelInput input, string modelPath)
        {
            MLNetModelPath =  modelPath; 

            return CreatePredictEngine().Predict(input);
        }

        private  PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
